<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rosterd.Client.Api</name>
    </assembly>
    <members>
        <member name="M:Rosterd.Client.Api.Controllers.BaseApiController.IsProvidedApiKeyValid(System.String)">
            <summary>
            Checks if the api key given is valid (ie: its compared against our constant)
            </summary>
            <param name="apiKey"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Client.Api.Controllers.HomeController.Get">
            <summary>
            Default route (needed for the react app to return 200 so the react admin works with no issues)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Client.Api.Controllers.JobsController">
            <summary>
            All actions related to Jobs for the user
            </summary>
        </member>
        <member name="M:Rosterd.Client.Api.Controllers.JobsController.AcceptAndConfirmJob(System.Int64)">
            <summary>
            Marks the current user as accepting the job
            </summary>
            <param name="jobId">The job id</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Client.Api.Controllers.JobsController.CancelJob(System.Int64)">
            <summary>
            Removes the current user from the job, if the grace period has run out then a HTTP 422 is thrown back
            </summary>
            <param name="jobId">The job id</param>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Client.Api.Controllers.MyJobsController">
            <summary>
            All actions related to Jobs for the user
            </summary>
        </member>
        <member name="M:Rosterd.Client.Api.Controllers.MyJobsController.GetAllRelevantJobsForUser(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the jobs that are relevant for the user
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Client.Api.Controllers.MyJobsController.GetAllCurrentJobsForUser(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the jobs that are currently in progress or upcoming for the user
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Client.Api.Controllers.MyJobsController.GetAllHistoricalCompletedJobsForUser(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the historically completed jobs (only jobs that have been completed)
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Client.Api.Controllers.MyJobsController.GetAllHistoricalCancelledJobsForUser(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the historically cancelled jobs (only jobs that have been cancelled by the admin or the user opted out before the grace period)
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Client.Api.Controllers.PreferencesController">
            <summary>
            All actions related to the user
            </summary>
        </member>
        <member name="M:Rosterd.Client.Api.Controllers.PreferencesController.GetUserPreferences">
            <summary>
            Gets all user profile information for the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Client.Api.Controllers.PreferencesController.UpdateUserPreferences(Rosterd.Domain.Models.StaffModels.StaffAppUserPreferencesModel)">
            <summary>
            Updates all user profile information for the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Client.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddAppAndDatabaseDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Registers all database dependencies and all app dependencies
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <param name="hostingEnvironment"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Client.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomAuthenticationWithJwtBearer(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds all the custom authenticate required for Auth0 and jwt/bearer tokens
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Client.Api.Services.IUserContext.GetRosterdAppUserOrCreateIfNotExists">
            <summary>
            Creates a rosterd app user
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rosterd.Client.Api.Services.IUserContext.UserAuth0Id">
            <summary>
            Gets the user id from auth 0
            </summary>
        </member>
        <member name="P:Rosterd.Client.Api.Services.IUserContext.UsersAuth0OrganizationId">
            <summary>
            Gets the users organization id (from auth 0, the auth0 id of the organization)
            </summary>
        </member>
        <member name="P:Rosterd.Client.Api.Services.IUserContext.UserEmailAddress">
            <summary>
            The email address of the user
            </summary>
        </member>
        <member name="P:Rosterd.Client.Api.Services.IUserContext.UsersFirstName">
            <summary>
            The users first name
            </summary>
        </member>
        <member name="P:Rosterd.Client.Api.Services.IUserContext.UsersLastName">
            <summary>
            The users last name
            </summary>
        </member>
        <member name="P:Rosterd.Client.Api.Services.IUserContext.UsersPhoneNumber">
            <summary>
            The users phone number
            </summary>
        </member>
        <member name="P:Rosterd.Client.Api.Services.IUserContext.Roles">
            <summary>
            Gets all the roles for the user
            </summary>
        </member>
        <member name="P:Rosterd.Client.Api.Services.IUserContext.AccessToken">
            <summary>
            Gets the raw access token received from Auth0,
            This can be useful if we need to call profile api in auth0 or anything external call we need to make for the user
            </summary>
        </member>
        <member name="T:Rosterd.Client.Api.Services.UserContext">
            <summary>
                The context provides various bits of information about the logged in user, their roles and claims
                The tenant this current user belongs to is cached for the specified duration
            </summary>
        </member>
        <member name="P:Rosterd.Client.Api.Startup.HostingEnvironment">
            <summary>
                Gets the hosting environment.
            </summary>
            <value>The hosting environment.</value>
        </member>
        <member name="P:Rosterd.Client.Api.Startup.Configuration">
            <summary>
                Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
    </members>
</doc>
