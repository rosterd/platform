<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rosterd.Admin.Api</name>
    </assembly>
    <members>
        <member name="M:Rosterd.Admin.Api.Controllers.BaseApiController.IsProvidedApiKeyValid(System.String)">
            <summary>
            Checks if the api key given is valid (ie: its compared against our constant)
            </summary>
            <param name="apiKey"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.GetAllFacilities(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
                Gets all the facilities
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.GetFacilityById(System.Nullable{System.Int64})">
            <summary>
                Get Facility by Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.AddNewFacility(Rosterd.Admin.Api.Requests.Facility.AddUpdateFacilityRequest)">
            <summary>
                Adds a new Facility
            </summary>
            <param name="request">The Facility to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.UpdateFacility(Rosterd.Admin.Api.Requests.Facility.AddUpdateFacilityRequest)">
            <summary>
                Update a Facility
            </summary>
            <param name="request">The Facility to update</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.RemoveFacility(System.Nullable{System.Int64})">
            <summary>
                Deletes Facility
            </summary>
            <param name="facilityId">The Facility to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.HomeController.Get">
            <summary>
            Default route (needed for the react app to return 200 so the react admin works with no issues)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Admin.Api.Controllers.JobsController">
            <summary>
            All actions related to Jobs
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.GetAllJobs(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the jobs 
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.GetJobById(System.Nullable{System.Int64})">
            <summary>
            Get Job by Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.AddNewJob(Rosterd.Admin.Api.Requests.Job.AddJobRequest)">
            <summary>
            Adds a new Job
            </summary>
            <param name="request">The Job to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.RemoveJob(System.Nullable{System.Int64})">
            <summary>
            Sets the job status to 'Cancelled' 
            </summary>
            <param name="jobId">The Job to be removed</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.GetAllSkills(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the resources 
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.GetSkillById(System.Nullable{System.Int64})">
            <summary>
            Get Skill by Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.AddNewSkill(Rosterd.Admin.Api.Requests.Skills.AddUpdateSkillRequest)">
            <summary>
            Adds a new Skill
            </summary>
            <param name="request">The Skill to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.UpdateSkill(Rosterd.Admin.Api.Requests.Skills.AddUpdateSkillRequest)">
            <summary>
            Update a Skill
            </summary>
            <param name="request">The Skill to update</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.RemoveSkill(System.Nullable{System.Int64})">
            <summary>
            Deletes Skill
            </summary>
            <param name="skillId">The Skill to be deleted</param>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Admin.Api.Controllers.StaffController">
            <summary>
            All actions related to resources
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.GetAllStaff(System.Nullable{System.Int64},Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the resources 
            </summary>
            <param name="facilityId">The facility id to filter all the list of Staff by</param>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.GetStaffById(System.Nullable{System.Int64})">
            <summary>
            Get Staff by Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.AddNewStaffMember(Rosterd.Admin.Api.Requests.Staff.AddUpdateStaffRequest)">
            <summary>
            Adds a new Staff member
            </summary>
            <param name="request">The Staff member to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.UpdateStaffMember(Rosterd.Admin.Api.Requests.Staff.AddUpdateStaffRequest)">
            <summary>
            Update a Staff member details
            </summary>
            <param name="request">The Staff member to update</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.RemoveStaffMember(System.Nullable{System.Int64})">
            <summary>
            Makes a Staff member as inactive
            </summary>
            <param name="staffId">The Staff member to mark as inactive</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.MoveStaffMemberToAnotherFacility(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Moves a Staff member from their existing facility to another facility
            </summary>
            <param name="facilityId">The facility id to move</param>
            <param name="staffId">The Staff id</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.AddSkillToStaff(System.Nullable{System.Int64},Rosterd.Admin.Api.Requests.Staff.AddSkillsToStaffRequest)">
            <summary>
            Adds a collection of skills to the Staff member
            </summary>
            <param name="staffId">The Staff id</param>
            <param name="request">The skills to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.DeleteAllSkillsForStaff(System.Nullable{System.Int64})">
            <summary>
            Removes all skills from a Staff member
            </summary>
            <param name="staffId">The Staff id</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddAppAndDatabaseDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Registers all database dependencies and all app dependencies
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <param name="hostingEnvironment"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds all the swagger UI and open api spec
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomAuthenticationWithJwtBearer(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds all the custom authenticate required for Auth0 and jwt/bearer tokens
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:Rosterd.Admin.Api.Requests.Job.AddJobRequest.PreviouslyCancelledJobId">
            <summary>
            Only required if an existing job was cancelled and new one created based of the old one
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Services.IUserContext.DoesTenantAndUserExist">
            <summary>
            Checks if a tenant and user exists for the currently logged in user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Services.IUserContext.GetTenantIdForUser">
            <summary>
            Gets the tenant of the current logged in user.
            NB: This gets the full tenant object and can be a bit expensive if you just need the tenant id
            then calls the GetTenantIdForUser() method
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Services.IUserContext.GetTenantAndUser">
            <summary>
            Gets the tenant of the current logged in user.
            NB: This gets the full tenant object and StaffToAuth0Id object from cache
            can be a bit expensive due to the weight of the object (serializing/deserializing from cache)
            if you just need the tenant id
            then call the GetTenantIdForUser() method which is a very light weight and fast
            </summary>
        </member>
        <member name="P:Rosterd.Admin.Api.Services.IUserContext.Roles">
            <summary>
            Gets all the roles for the user
            </summary>
        </member>
        <member name="P:Rosterd.Admin.Api.Services.IUserContext.IdmUserId">
            <summary>
            Gets the unique id from Azure B2C for the user
            </summary>
        </member>
        <member name="P:Rosterd.Admin.Api.Services.IUserContext.AccessToken">
            <summary>
            Gets the raw access token received from Auth0,
            This can be useful if we need to call profile in b2c or anything external call we need to make for the user
            </summary>
        </member>
        <member name="P:Rosterd.Admin.Api.Startup.HostingEnvironment">
            <summary>
                Gets the hosting environment.
            </summary>
            <value>The hosting environment.</value>
        </member>
        <member name="P:Rosterd.Admin.Api.Startup.Configuration">
            <summary>
                Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
    </members>
</doc>
