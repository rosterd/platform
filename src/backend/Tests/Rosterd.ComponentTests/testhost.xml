<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rosterd.Admin.Api</name>
    </assembly>
    <members>
        <member name="M:Rosterd.Admin.Api.Controllers.BaseApiController.IsProvidedApiKeyValid(System.String)">
            <summary>
            Checks if the api key given is valid (ie: its compared against our constant)
            </summary>
            <param name="apiKey"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.GetAllFacilities(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
                Gets all the resources
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.GetFacilityById(System.Nullable{System.Int64})">
            <summary>
                Get Facility by Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.AddNewFacility(Rosterd.Admin.Api.Requests.Facility.AddUpdateFacilityRequest)">
            <summary>
                Adds a new Facility
            </summary>
            <param name="request">The Facility to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.UpdateFacility(Rosterd.Admin.Api.Requests.Facility.AddUpdateFacilityRequest)">
            <summary>
                Update a Facility
            </summary>
            <param name="request">The Facility to update</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.RemoveFacility(System.Nullable{System.Int64})">
            <summary>
                Deletes Facility
            </summary>
            <param name="facilityId">The Facility to be deleted</param>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Admin.Api.Controllers.JobsController">
            <summary>
            All actions related to Jobs
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.GetAllJobs(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the resources 
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.GetJobById(System.Nullable{System.Int64})">
            <summary>
            Get Job by Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.AddNewJob(Rosterd.Admin.Api.Requests.Job.AddUpdateJobRequest)">
            <summary>
            Adds a new Job
            </summary>
            <param name="request">The Job to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.UpdateJob(Rosterd.Admin.Api.Requests.Job.AddUpdateJobRequest)">
            <summary>
            Update a Job
            </summary>
            <param name="request">The Job to update</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.RemoveJob(System.Nullable{System.Int64})">
            <summary>
            Deletes Job
            </summary>
            <param name="jobId">The Job to be deleted</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.GetAllSkills(Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the resources 
            </summary>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.GetSkillById(System.Nullable{System.Int64})">
            <summary>
            Get Skill by Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.AddNewSkill(Rosterd.Admin.Api.Requests.Skills.AddUpdateSkillRequest)">
            <summary>
            Adds a new Skill
            </summary>
            <param name="request">The Skill to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.UpdateSkill(Rosterd.Admin.Api.Requests.Skills.AddUpdateSkillRequest)">
            <summary>
            Update a Skill
            </summary>
            <param name="request">The Skill to update</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.RemoveSkill(System.Nullable{System.Int64})">
            <summary>
            Deletes Skill
            </summary>
            <param name="skillId">The Skill to be deleted</param>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Admin.Api.Controllers.StaffController">
            <summary>
            All actions related to resources
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.GetAllStaff(System.Nullable{System.Int64},Rosterd.Domain.Models.PagingQueryStringParameters)">
            <summary>
            Gets all the resources 
            </summary>
            <param name="facilityId">The facility organizationId to filter all the list of Staff by</param>
            <param name="pagingParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.GetStaffById(System.Nullable{System.Int64})">
            <summary>
            Get Staff by Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.AddNewStaffMember(Rosterd.Admin.Api.Requests.Staff.AddUpdateStaffRequest)">
            <summary>
            Adds a new Staff member
            </summary>
            <param name="request">The Staff member to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.UpdateStaff(Rosterd.Admin.Api.Requests.Staff.AddUpdateStaffRequest)">
            <summary>
            Update a Staff member details
            </summary>
            <param name="request">The Staff member to update</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.UpdateStaffToInactive(System.Nullable{System.Int64})">
            <summary>
            Makes a Staff member as inactive
            </summary>
            <param name="staffId">The Staff member to mark as inactive</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.DeleteAllExistingFacilitiesForStaffAndAddNew(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Moves a Staff member from their existing facility to another facility
            </summary>
            <param name="facilityId">The facility organizationId to move</param>
            <param name="staffId">The Staff organizationId</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.AddSkillToStaff(System.Nullable{System.Int64},Rosterd.Admin.Api.Requests.Staff.AddSkillsToStaffRequest)">
            <summary>
            Adds a collection of skills to the Staff member
            </summary>
            <param name="staffId">The Staff organizationId</param>
            <param name="request">The skills to add</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.DeleteAllSkillsForStaff(System.Nullable{System.Int64})">
            <summary>
            Removes all skills from a Staff member
            </summary>
            <param name="staffId">The Staff organizationId</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddAppAndDatabaseDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Registers all database dependencies and all app dependencies
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <param name="hostingEnvironment"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds all the required health checks
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds all the swagger UI and open api spec
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomAuthenticationWithJwtBearer(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds all the custom authenticate required for Auth0 and jwt/bearer tokens
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:Rosterd.Admin.Api.Startup.HostingEnvironment">
            <summary>
                Gets the hosting environment.
            </summary>
            <value>The hosting environment.</value>
        </member>
        <member name="P:Rosterd.Admin.Api.Startup.Configuration">
            <summary>
                Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
    </members>
</doc>
