// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Rosterd.Data.SqlServer.Models;

#nullable disable

namespace Rosterd.Data.SqlServer.Context
{
    public partial class RosterdDbContext : DbContext, IRosterdDbContext
    {
        public RosterdDbContext(DbContextOptions<RosterdDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Capability> Capabilities { get; set; }
        public virtual DbSet<Facility> Facilities { get; set; }
        public virtual DbSet<FacilityCapability> FacilityCapabilities { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobSkill> JobSkills { get; set; }
        public virtual DbSet<JobStaff> JobStaffs { get; set; }
        public virtual DbSet<JobStatusChange> JobStatusChanges { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<Staff> Staff { get; set; }
        public virtual DbSet<StaffFacility> StaffFacilities { get; set; }
        public virtual DbSet<StaffSkill> StaffSkills { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Facility>(entity =>
            {
                entity.HasOne(d => d.Organzation)
                    .WithMany(p => p.Facilities)
                    .HasForeignKey(d => d.OrganzationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Facility_Organization");
            });

            modelBuilder.Entity<FacilityCapability>(entity =>
            {
                entity.HasOne(d => d.Capability)
                    .WithMany(p => p.FacilityCapabilities)
                    .HasForeignKey(d => d.CapabilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FacilityCapability_Capability");

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.FacilityCapabilities)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_FacilityCapability_Facility");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.HasOne(d => d.Facility)
                    .WithMany(p => p.Jobs)
                    .HasForeignKey(d => d.FacilityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Job_Facility");
            });

            modelBuilder.Entity<JobSkill>(entity =>
            {
                entity.HasOne(d => d.Job)
                    .WithMany(p => p.JobSkills)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_Jobskill_Job");
            });

            modelBuilder.Entity<JobStaff>(entity =>
            {
                entity.HasOne(d => d.Job)
                    .WithMany(p => p.JobStaffs)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_JobStaff_Job");

                entity.HasOne(d => d.Staff)
                    .WithMany(p => p.JobStaffs)
                    .HasForeignKey(d => d.StaffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_JobStaff_Staff");
            });

            modelBuilder.Entity<JobStatusChange>(entity =>
            {
                entity.Property(e => e.JobStatusChangeDateTimeUtc)
                    //.HasPrecision(1)
                    .HasDefaultValueSql("switchoffset(sysdatetimeoffset(),'+00:00')");
            });

            modelBuilder.Entity<Skill>(entity =>
            {
                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Skill_Organization");
            });

            modelBuilder.Entity<Staff>(entity =>
            {
                entity.Property(e => e.IsActive).HasDefaultValueSql("1");

                entity.HasOne(d => d.Organization)
                    .WithMany(p => p.Staff)
                    .HasForeignKey(d => d.OrganizationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Staff_Organization");
            });

            modelBuilder.Entity<StaffFacility>(entity =>
            {
                entity.HasOne(d => d.Staff)
                    .WithMany(p => p.StaffFacilities)
                    .HasForeignKey(d => d.StaffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StaffFacility_Staff");
            });

            modelBuilder.Entity<StaffSkill>(entity =>
            {
                entity.HasOne(d => d.Staff)
                    .WithMany(p => p.StaffSkills)
                    .HasForeignKey(d => d.StaffId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Fk_StaffSkill_Staff");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
