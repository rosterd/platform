<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rosterd.Admin.Api</name>
    </assembly>
    <members>
        <member name="M:Rosterd.Admin.Api.Controllers.BaseApiController.IsProvidedApiKeyValid(System.String)">
            <summary>
            Checks if the api key given is valid (ie: its compared against our constant)
            </summary>
            <param name="apiKey"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.FacilitiesController.Get">
            <summary>
            Gets all the resources 
            </summary>
            <param name="id">the resource id</param>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Admin.Api.Controllers.JobsController">
            <summary>
            All actions related to resources
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.JobsController.Get">
            <summary>
            Gets all the resources 
            </summary>
            <param name="id">the resource id</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.SkillsController.Get">
            <summary>
            Gets all the resources 
            </summary>
            <param name="id">the resource id</param>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Admin.Api.Controllers.StaffController">
            <summary>
            All actions related to resources
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Controllers.StaffController.Get">
            <summary>
            Gets all the resources 
            </summary>
            <param name="id">the resource id</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ApplicationBuilderExtensions.UseSwaggerAuthenticationCheck(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Add the swagger authentication middleware responsible for making sure Swagger UI is not open to public
            </summary>
            <param name="builder">The application builder.</param>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Admin.Api.Infrastructure.Extensions.DistributedCacheExtensions">
            <summary>
                <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> extension methods.
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.DistributedCacheExtensions.GetCacheExpiry(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.Int32)">
            <summary>
            Helper method that gets the cache expiry for a given absolute expiry in minutes
            </summary>
            <param name="cache">The distributed cache.</param>
            <param name="absoluteExpiryInMinutes">The cache to expire in minutes</param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.DistributedCacheExtensions.GetAsJsonAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the value of type <typeparamref name="T" /> with the specified key from the cache asynchronously by
            deserializing it from JSON format or returns <c>default(T)</c> if the key was not found.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="cache">The distributed cache.</param>
            <param name="key">The cache item key.</param>
            <param name="jsonSerializerOptions">The JSON serializer options or <c>null</c> to use the default.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The value of type <typeparamref name="T" /> or <c>null</c> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cache"/> or <paramref name="key"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.DistributedCacheExtensions.SetAsJsonAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,``0,Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
                Sets the value of type <typeparamref name="T" /> with the specified key in the cache asynchronously by
                serializing it to JSON format.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="cache">The distributed cache.</param>
            <param name="key">The cache item key.</param>
            <param name="value">The value to cache.</param>
            <param name="options">The cache options or <c>null</c> to use the default cache options.</param>
            <param name="jsonSerializerOptions">The JSON serializer options or <c>null</c> to use the default.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The value of type <typeparamref name="T" /> or <c>null</c> if the key was not found.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="cache" /> or <paramref name="key" /> is
                <c>null</c>.
            </exception>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.DistributedCacheExtensions.GetAsJsonAsync``1(Microsoft.Extensions.Caching.Distributed.IDistributedCache,System.String,System.Func{System.Threading.Tasks.Task{``0}},Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
            <summary>
            Gets the value of type <typeparamref name="T"/> with the specified key from the cache asynchronously by
            deserializing it from JSON format or calls the cacheMiss function and set the cache if the key was not found.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="cache">
            The distributed cache.
            </param>
            <param name="key">
            The cache item key.
            </param>
            <param name="cacheMiss">
            The function executed when cache is missed
            </param>
            <param name="options">
            The cache options or <c>null</c> to use the default cache options.
            </param>
            <returns>
            The value of type <typeparamref name="T"/> or <c>null</c> if the key was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cache"/> or <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomCaching(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures caching for the application. Registers the <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> and
            <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/> types with the services collection or IoC container. The
            <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/> is intended to be used in cloud hosted scenarios where there is a shared
            cache, which is shared between multiple instances of the application. Use the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/>
            otherwise.
            </summary>
            <param name="services">The services.</param>
            <returns>The services with caching services added.</returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddAppAndDatabaseDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Registers all database dependencies and all app dependencies
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <param name="hostingEnvironment"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds all the required health checks
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds all the swagger UI and open api spec
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.Extensions.ServiceCollectionExtensions.AddCustomAuthenticationWithJwtBearer(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds all the custom authenticate required for Auth0 and jwt/bearer tokens
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:Rosterd.Admin.Api.Infrastructure.ValidationAttributes.NumberIsRequiredAndShouldBeGreaterThanZeroAttribute">
            <summary>
                Validation attribute to indicate that a property field or parameter is required, it should be a number and should be greater than zero
            </summary>
        </member>
        <member name="M:Rosterd.Admin.Api.Infrastructure.ValidationAttributes.NumberIsRequiredAndShouldBeGreaterThanZeroAttribute.IsValid(System.Object)">
            <summary>
                Validation attribute to indicate that a property field or parameter is required, it should be a number and should be greater than zero
            </summary>
            <param name="value">The integer value of the selection</param>
            <returns>True if value is greater than zero</returns>
        </member>
        <member name="P:Rosterd.Admin.Api.Startup.HostingEnvironment">
            <summary>
                Gets the hosting environment.
            </summary>
            <value>The hosting environment.</value>
        </member>
        <member name="P:Rosterd.Admin.Api.Startup.Configuration">
            <summary>
                Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
    </members>
</doc>
