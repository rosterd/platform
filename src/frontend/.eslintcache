[{"/Users/deepu/work/rosterd/src/frontend/src/index.tsx":"1","/Users/deepu/work/rosterd/src/frontend/src/reportWebVitals.ts":"2","/Users/deepu/work/rosterd/src/frontend/src/App.tsx":"3","/Users/deepu/work/rosterd/src/frontend/src/shared/constants/AppConst.ts":"4","/Users/deepu/work/rosterd/src/frontend/src/shared/constants/AppEnums.ts":"5","/Users/deepu/work/rosterd/src/frontend/src/shared/localization/index.ts":"6","/Users/deepu/work/rosterd/src/frontend/src/shared/jss/common/common.style.tsx":"7","/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/ar_SA.ts":"8","/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/en-US.ts":"9","/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/fr_FR.ts":"10","/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/zh-Hans-CN.ts":"11","/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/es_ES.ts":"12","/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/it_IT.ts":"13","/Users/deepu/work/rosterd/src/frontend/src/modules/index.tsx":"14","/Users/deepu/work/rosterd/src/frontend/src/shared/constants/ColorSets.ts":"15","/Users/deepu/work/rosterd/src/frontend/src/shared/components/UserInfo/index.tsx":"16","/Users/deepu/work/rosterd/src/frontend/src/shared/components/AppLogo/index.tsx":"17","/Users/deepu/work/rosterd/src/frontend/src/shared/components/HeaderUser/index.tsx":"18","/Users/deepu/work/rosterd/src/frontend/src/shared/components/AppLogoWhite/index.tsx":"19","/Users/deepu/work/rosterd/src/frontend/src/modules/routesConfig.tsx":"20","/Users/deepu/work/rosterd/src/frontend/src/modules/skills/index.tsx":"21","/Users/deepu/work/rosterd/src/frontend/src/modules/facilities/index.tsx":"22","/Users/deepu/work/rosterd/src/frontend/src/modules/resources/index.tsx":"23","/Users/deepu/work/rosterd/src/frontend/src/modules/reports/index.tsx":"24","/Users/deepu/work/rosterd/src/frontend/src/modules/jobs/index.tsx":"25","/Users/deepu/work/rosterd/src/frontend/src/modules/dashboard/index.tsx":"26","/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/index.tsx":"27","/Users/deepu/work/rosterd/src/frontend/src/modules/facilities/components/AddFacilityModal.tsx":"28","/Users/deepu/work/rosterd/src/frontend/src/modules/resources/components/AddResourceModal.tsx":"29","/Users/deepu/work/rosterd/src/frontend/src/modules/jobs/components/PublishJobModal.tsx":"30","/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/Error404/index.tsx":"31","/Users/deepu/work/rosterd/src/frontend/src/modules/dashboard/components/StatsCard.tsx":"32","/Users/deepu/work/rosterd/src/frontend/src/shared/services/facilities.api.ts":"33","/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/ComingSoon/index.tsx":"34","/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/Error500/index.tsx":"35","/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/Maintenance/index.tsx":"36","/Users/deepu/work/rosterd/src/frontend/src/shared/services/axiosInstance.ts":"37","/Users/deepu/work/rosterd/src/frontend/src/types/actions/Auth.actions.ts":"38"},{"size":640,"mtime":1615951575879,"results":"39","hashOfConfig":"40"},{"size":421,"mtime":1615951577938,"results":"41","hashOfConfig":"40"},{"size":1069,"mtime":1617001998017,"results":"42","hashOfConfig":"40"},{"size":501,"mtime":1617097504505,"results":"43","hashOfConfig":"40"},{"size":1203,"mtime":1615951578428,"results":"44","hashOfConfig":"40"},{"size":373,"mtime":1615951578619,"results":"45","hashOfConfig":"40"},{"size":1057,"mtime":1617012530342,"results":"46","hashOfConfig":"40"},{"size":149,"mtime":1615951578510,"results":"47","hashOfConfig":"40"},{"size":215,"mtime":1617012530342,"results":"48","hashOfConfig":"40"},{"size":215,"mtime":1617012530343,"results":"49","hashOfConfig":"40"},{"size":220,"mtime":1617012530342,"results":"50","hashOfConfig":"40"},{"size":212,"mtime":1617012530342,"results":"51","hashOfConfig":"40"},{"size":215,"mtime":1617012530342,"results":"52","hashOfConfig":"40"},{"size":1553,"mtime":1617097075621,"results":"53","hashOfConfig":"40"},{"size":1227,"mtime":1615951578437,"results":"54","hashOfConfig":"40"},{"size":3897,"mtime":1617095525819,"results":"55","hashOfConfig":"40"},{"size":1410,"mtime":1617012530342,"results":"56","hashOfConfig":"40"},{"size":4810,"mtime":1617095407494,"results":"57","hashOfConfig":"40"},{"size":908,"mtime":1617012530342,"results":"58","hashOfConfig":"40"},{"size":1209,"mtime":1615951577687,"results":"59","hashOfConfig":"40"},{"size":2681,"mtime":1615886626586,"results":"60","hashOfConfig":"40"},{"size":2531,"mtime":1617000704816,"results":"61","hashOfConfig":"40"},{"size":2926,"mtime":1617012530342,"results":"62","hashOfConfig":"40"},{"size":453,"mtime":1617012530343,"results":"63","hashOfConfig":"40"},{"size":5132,"mtime":1617095158762,"results":"64","hashOfConfig":"40"},{"size":2633,"mtime":1617094755959,"results":"65","hashOfConfig":"40"},{"size":767,"mtime":1617094960473,"results":"66","hashOfConfig":"40"},{"size":2254,"mtime":1617000226181,"results":"67","hashOfConfig":"40"},{"size":3082,"mtime":1615886626583,"results":"68","hashOfConfig":"40"},{"size":3664,"mtime":1617095102944,"results":"69","hashOfConfig":"40"},{"size":2337,"mtime":1617094866104,"results":"70","hashOfConfig":"40"},{"size":1625,"mtime":1617095645928,"results":"71","hashOfConfig":"40"},{"size":476,"mtime":1617000666637,"results":"72","hashOfConfig":"40"},{"size":4184,"mtime":1617094850457,"results":"73","hashOfConfig":"40"},{"size":2344,"mtime":1617094878356,"results":"74","hashOfConfig":"40"},{"size":2263,"mtime":1617094888468,"results":"75","hashOfConfig":"40"},{"size":1132,"mtime":1617003118175,"results":"76","hashOfConfig":"40"},{"size":597,"mtime":1615951578635,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"5aw0ek",{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"80"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/deepu/work/rosterd/src/frontend/src/index.tsx",[],["170","171","172","173","174"],"/Users/deepu/work/rosterd/src/frontend/src/reportWebVitals.ts",["175"],"import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/deepu/work/rosterd/src/frontend/src/App.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/constants/AppConst.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/constants/AppEnums.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/localization/index.ts",["176"],"import enLang from './entries/en-US';\nimport zhLang from './entries/zh-Hans-CN';\nimport arLang from './entries/ar_SA';\nimport itLang from './entries/it_IT';\nimport esLang from './entries/es_ES';\nimport frLang from './entries/fr_FR';\n\nconst AppLocale: any = {\n  en: enLang,\n  zh: zhLang,\n  ar: arLang,\n  it: itLang,\n  es: esLang,\n  fr: frLang,\n};\n\nexport default AppLocale;\n","/Users/deepu/work/rosterd/src/frontend/src/shared/jss/common/common.style.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/ar_SA.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/en-US.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/fr_FR.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/zh-Hans-CN.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/es_ES.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/localization/entries/it_IT.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/modules/index.tsx",["177"],"import React, {LazyExoticComponent} from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {createRoutes} from '../@crema/utility/Utils';\nimport errorPagesConfigs from './errorPages';\nimport {authRouteConfig} from './auth';\nimport {initialUrl} from '../shared/constants/AppConst';\n\ninterface PageRouteConfig {\n  path: string;\n  component: LazyExoticComponent<any>;\n}\n\nconst buildRouteConfigs = (routes: PageRouteConfig[]) =>\n  routes.map((route) => {\n    const {path, component} = route;\n    return {\n      auth: ['user'],\n      routes: [{path, component}],\n    };\n  });\n\nconst pageRouteConfigs: PageRouteConfig[] = [\n  {\n    path: '/dashboard',\n    component: React.lazy(() => import('./dashboard')),\n  },\n  {\n    path: '/jobs',\n    component: React.lazy(() => import('./jobs')),\n  },\n  {\n    path: '/reports',\n    component: React.lazy(() => import('./reports')),\n  },\n  {\n    path: '/facilities',\n    component: React.lazy(() => import('./facilities')),\n  },\n  {\n    path: '/skills',\n    component: React.lazy(() => import('./skills')),\n  },\n  {\n    path: '/resources',\n    component: React.lazy(() => import('./resources')),\n  },\n];\n\nconst pageRoutes = buildRouteConfigs(pageRouteConfigs);\n\nconst routeConfigs = [...pageRoutes, ...errorPagesConfigs, ...authRouteConfig];\n\nconst routes = [\n  ...createRoutes(routeConfigs),\n  {\n    path: '/',\n    exact: true,\n    component: (): JSX.Element => <Redirect to={initialUrl} />,\n  },\n  {\n    component: (): JSX.Element => <Redirect to='/error-pages/error-404' />,\n  },\n];\n\nexport default routes;\n","/Users/deepu/work/rosterd/src/frontend/src/shared/constants/ColorSets.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/components/UserInfo/index.tsx",["178"],"import React, {useContext} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport clsx from 'clsx';\nimport {makeStyles} from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Box from '@material-ui/core/Box';\nimport {orange} from '@material-ui/core/colors';\nimport AppContext from '../../../@crema/utility/AppContext';\nimport {useAuthUser} from '../../../@crema/utility/AppHooks';\nimport {Fonts, ThemeMode} from '../../constants/AppEnums';\nimport AppContextPropsType from '../../../types/AppContextPropsType';\nimport {AuthUser} from '../../../types/models/AuthUser';\nimport {setAuthToken} from '../../../@crema/services/ApiConfig';\n\nconst useStyles = makeStyles((theme) => ({\n  crUserInfo: {\n    backgroundColor: 'rgba(0,0,0,.08)',\n    paddingTop: 9,\n    paddingBottom: 9,\n    minHeight: 56,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    [theme.breakpoints.up('sm')]: {\n      paddingTop: 10,\n      paddingBottom: 10,\n      minHeight: 70,\n    },\n  },\n  profilePic: {\n    fontSize: 24,\n    backgroundColor: orange[500],\n  },\n  userInfo: {\n    width: 'calc(100% - 75px)',\n  },\n  userName: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    fontSize: 16,\n    fontWeight: Fonts.MEDIUM,\n    color: (props: {themeMode: ThemeMode}) =>\n      props.themeMode === ThemeMode.LIGHT ? '#313541' : 'white',\n  },\n  designation: {\n    marginTop: -2,\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    color: theme.palette.text.secondary,\n  },\n  pointer: {\n    cursor: 'pointer',\n  },\n}));\n\nconst UserInfo = (): JSX.Element => {\n  const {themeMode, updateAuthUser} = useContext<AppContextPropsType>(\n    AppContext,\n  );\n  const user: AuthUser | null = useAuthUser();\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const onUserSignout = () => {\n    // logout API goes Here\n    updateAuthUser(null);\n    setAuthToken(null);\n  };\n  const handleClick = (event: any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const getUserAvatar = (): string => {\n    if (user && user.displayName) {\n      return user.displayName.charAt(0).toUpperCase();\n    }\n    if (user && user.email) {\n      return user.email.charAt(0).toUpperCase();\n    }\n    return '';\n  };\n\n  const classes = useStyles({themeMode});\n\n  return (\n    <Box\n      px={{xs: 4, xl: 7}}\n      className={clsx(classes.crUserInfo, 'cr-user-info')}>\n      <Box display='flex' alignItems='center'>\n        {user && user.photoURL ? (\n          <Avatar className={classes.profilePic} src={user.photoURL} />\n        ) : (\n          <Avatar className={classes.profilePic}>{getUserAvatar()}</Avatar>\n        )}\n        <Box ml={4} className={clsx(classes.userInfo, 'user-info')}>\n          <Box\n            display='flex'\n            alignItems='center'\n            justifyContent='space-between'>\n            <Box mb={0} className={clsx(classes.userName)}>\n              {user && (user.displayName ? 'Kishore varma' : 'Admin User ')}\n            </Box>\n            <Box\n              ml={3}\n              className={classes.pointer}\n              color={themeMode === 'light' ? '#313541' : 'white'}>\n              <ExpandMoreIcon onClick={handleClick} />\n              <Menu\n                id='simple-menu'\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}>\n                <MenuItem>My account</MenuItem>\n                <MenuItem onClick={onUserSignout}>Logout</MenuItem>\n              </Menu>\n            </Box>\n          </Box>\n          <Box className={classes.designation}>System Manager</Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserInfo;\n","/Users/deepu/work/rosterd/src/frontend/src/shared/components/AppLogo/index.tsx",["179"],"import React, {useContext} from 'react';\nimport {Box} from '@material-ui/core';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\nimport AppContext from '../../../@crema/utility/AppContext';\nimport {ThemeMode} from '../../constants/AppEnums';\nimport AppContextPropsType from '../../../types/AppContextPropsType';\n\nconst AppLogo = () => {\n  const {themeMode} = useContext<AppContextPropsType>(AppContext);\n  const useStyles = makeStyles(() => ({\n    logoRoot: {\n      display: 'flex',\n      flexDirection: 'row',\n      cursor: 'pointer',\n      alignItems: 'center',\n    },\n    logo: {\n      height: 30,\n      marginRight: 10,\n    },\n  }));\n  const classes = useStyles();\n  return (\n    <Box className={classes.logoRoot}>\n      <Hidden smUp>\n        <img\n          className={classes.logo}\n          src={\n            themeMode === ThemeMode.DARK\n              ? '/assets/images/rosterd_logo.svg'\n              : '/assets/images/rosterd_logo.svg'\n          }\n          alt='rosterd-logo'\n        />\n      </Hidden>\n      <Hidden xsDown>\n        <img\n          className={classes.logo}\n          src={\n            themeMode === ThemeMode.DARK\n              ? '/assets/images/logo-white-with-name.png'\n              : '/assets/images/rosterd_logo.svg'\n          }\n          alt='rosterd-logo'\n        />\n      </Hidden>\n    </Box>\n  );\n};\n\nexport default AppLogo;\n","/Users/deepu/work/rosterd/src/frontend/src/shared/components/HeaderUser/index.tsx",["180"],"import React, {useContext} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport clsx from 'clsx';\nimport {makeStyles} from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Box from '@material-ui/core/Box';\nimport {orange} from '@material-ui/core/colors';\nimport Hidden from '@material-ui/core/Hidden';\nimport {Fonts, ThemeMode} from '../../constants/AppEnums';\nimport AppContext from '../../../@crema/utility/AppContext';\nimport {useAuthUser} from '../../../@crema/utility/AppHooks';\nimport AppContextPropsType, {\n  CremaTheme,\n} from '../../../types/AppContextPropsType';\nimport {AuthUser} from '../../../types/models/AuthUser';\nimport {setAuthToken} from '../../../@crema/services/ApiConfig';\n\nconst useStyles = makeStyles((theme: CremaTheme) => ({\n  crHeaderUser: {\n    backgroundColor: (props: {header: boolean; themeMode: ThemeMode}) =>\n      props.header ? 'transparent' : 'rgba(0,0,0,.08)',\n    paddingTop: 9,\n    paddingBottom: 9,\n    minHeight: 56,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    [theme.breakpoints.up('sm')]: {\n      paddingTop: 10,\n      paddingBottom: 10,\n      minHeight: 70,\n    },\n  },\n  profilePic: {\n    fontSize: 24,\n    backgroundColor: orange[500],\n  },\n  userInfo: {\n    width: (props: {header: boolean; themeMode: ThemeMode}) =>\n      !props.header ? 'calc(100% - 75px)' : '100%',\n  },\n  userName: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    cursor: 'pointer',\n    whiteSpace: 'nowrap',\n    fontSize: 15,\n    fontWeight: Fonts.MEDIUM,\n    color: (props: {header: boolean; themeMode: ThemeMode}) =>\n      props.themeMode === ThemeMode.DARK || !props.header ? 'white' : '#313541',\n  },\n  pointer: {\n    cursor: 'pointer',\n  },\n}));\n\ninterface HeaderUserProps {\n  header?: boolean;\n}\n\nconst HeaderUser: React.FC<HeaderUserProps> = (props: HeaderUserProps) => {\n  const {header = true} = props;\n  const {themeMode, updateAuthUser} = useContext<AppContextPropsType>(\n    AppContext,\n  );\n  const classes = useStyles({themeMode, header});\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const user: AuthUser | null = useAuthUser();\n\n  const onUserSignout = () => {\n    // logout API goes Here\n    updateAuthUser(null);\n    setAuthToken(null);\n  };\n  const handleClick = (event: any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const getUserAvatar = (): string => {\n    if (user && user.displayName) {\n      return user.displayName.charAt(0).toUpperCase();\n    }\n    if (user && user.email) {\n      return user.email.charAt(0).toUpperCase();\n    }\n    return '';\n  };\n  const getUserAvatarView = () => {\n    if (user && user.photoURL) {\n      return <Avatar className={classes.profilePic} src={user.photoURL} />;\n    }\n    return <Avatar className={classes.profilePic}>{getUserAvatar()}</Avatar>;\n  };\n\n  return (\n    <Box\n      px={{xs: 2, xl: 6}}\n      className={clsx(classes.crHeaderUser, 'cr-user-info')}>\n      <Box display='flex' alignItems='center'>\n        <Hidden mdDown> {getUserAvatarView()}</Hidden>\n        <Box className={clsx(classes.userInfo, 'user-info')}>\n          <Box\n            display='flex'\n            alignItems='center'\n            justifyContent='space-between'>\n            <Hidden mdDown>\n              <Box ml={4} mb={1.5} className={classes.userName}>\n                {user && (user.displayName ? user.displayName : user.email)}\n                <Box\n                  fontSize={13}\n                  fontWeight={Fonts.LIGHT}\n                  color='text.secondary'>\n                  System Manager\n                </Box>\n              </Box>\n            </Hidden>\n            <Box\n              ml={{md: 3}}\n              className={classes.pointer}\n              color={\n                themeMode === ThemeMode.DARK || !header ? 'white' : '#313541'\n              }>\n              <Hidden mdDown>\n                <ExpandMoreIcon onClick={handleClick} />\n              </Hidden>\n              <Hidden lgUp>\n                <Box component='span' onClick={handleClick}>\n                  {getUserAvatarView()}\n                </Box>\n              </Hidden>\n              <Menu\n                id='simple-menu'\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}>\n                <MenuItem>My account</MenuItem>\n                <MenuItem onClick={onUserSignout}>Logout</MenuItem>\n              </Menu>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\nexport default HeaderUser;\nHeaderUser.defaultProps = {\n  header: true,\n};\n","/Users/deepu/work/rosterd/src/frontend/src/shared/components/AppLogoWhite/index.tsx",["181"],"import React from 'react';\nimport {Box} from '@material-ui/core';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\n\nconst AppLogoWhite = () => {\n  const useStyles = makeStyles(() => ({\n    logoRoot: {\n      display: 'flex',\n      flexDirection: 'row',\n      cursor: 'pointer',\n      alignItems: 'center',\n    },\n    logo: {\n      height: 36,\n      marginRight: 10,\n    },\n  }));\n  const classes = useStyles();\n  return (\n    <Box className={classes.logoRoot}>\n      <Hidden smUp>\n        <img\n          className={classes.logo}\n          src=\"/assets/images/logo-white.png\"\n          alt='crema-logo'\n        />\n      </Hidden>\n      <Hidden xsDown>\n        <img\n          className={classes.logo}\n          src=\"/assets/images/logo-white-with-name.png\"\n          alt='crema-logo'\n        />\n      </Hidden>\n    </Box>\n  );\n};\n\nexport default AppLogoWhite;\n","/Users/deepu/work/rosterd/src/frontend/src/modules/routesConfig.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/modules/skills/index.tsx",["182","183","184","185","186","187","188"],"import React, {useEffect, useState} from 'react';\nimport MaterialTable from 'material-table';\nimport Box from '@material-ui/core/Box';\nimport AppAnimate from '@crema/core/AppAnimate';\nimport IntlMessages from '@crema/utility/IntlMessages';\nimport {Fonts} from 'shared/constants/AppEnums';\nimport {makeStyles} from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n  materialTable: {\n    '& .MuiTableCell-paddingCheckbox': {\n      paddingLeft: 16,\n    },\n  },\n}));\n\ninterface Skill {\n  name: string;\n}\n\nconst initialState: Skill[] = [];\n\nconst Resources = () => {\n  const classes = useStyles();\n  const [skills, setSkills] = useState(initialState);\n  useEffect(() => {\n    setTimeout(() => {\n      setSkills([\n        {name: 'Nurse'},\n        {name: 'Chef'},\n        {name: 'Health care assistant'},\n      ]);\n    }, 500);\n  }, []);\n  console.log(skills);\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box>\n        <Box\n          component='h2'\n          color='text.primary'\n          fontSize={16}\n          mb={{xs: 4, sm: 4, xl: 6}}\n          fontWeight={Fonts.BOLD}>\n          <IntlMessages id='skills.heading' />\n        </Box>\n        <Box className={classes.materialTable}>\n          <MaterialTable\n            title=''\n            columns={[{title: 'Name', field: 'name'}]}\n            data={skills}\n            editable={{\n              onRowAdd: (newData) =>\n                new Promise((resolve, reject) => {\n                  setTimeout(() => {\n                    setSkills([...skills, newData]);\n                    resolve(true);\n                  }, 1000);\n                }),\n              onRowUpdate: (newData, oldData) =>\n                new Promise((resolve, reject) => {\n                  setTimeout(() => {\n                    const dataUpdate = [...skills];\n                    const index = (oldData as any).tableData.id;\n                    dataUpdate[index] = newData;\n                    setSkills([...dataUpdate]);\n                    resolve(true);\n                  }, 1000);\n                }),\n              onRowDelete: (oldData) =>\n                new Promise((resolve, reject) => {\n                  setTimeout(() => {\n                    const dataDelete = [...skills];\n                    const index = (oldData as any).tableData.id;\n                    dataDelete.splice(index, 1);\n                    setSkills([...dataDelete]);\n                    resolve(true);\n                  }, 1000);\n                }),\n            }}\n            options={{\n              actionsColumnIndex: -1,\n            }}\n          />\n        </Box>\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default Resources;\n","/Users/deepu/work/rosterd/src/frontend/src/modules/facilities/index.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/modules/resources/index.tsx",["189","190","191","192"],"import React, {useState} from 'react';\nimport MaterialTable from 'material-table';\nimport Box from '@material-ui/core/Box';\nimport AppAnimate from '@crema/core/AppAnimate';\nimport IntlMessages from '@crema/utility/IntlMessages';\nimport {Fonts} from 'shared/constants/AppEnums';\nimport {Button, Grid, makeStyles} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddResourceModal from './components/AddResourceModal';\n\nconst useStyles = makeStyles(() => ({\n  materialTable: {\n    '& .MuiTableCell-paddingCheckbox': {\n      paddingLeft: 16,\n    },\n  },\n  buttonContainer: {\n    textAlign: 'right',\n  },\n}));\n\nconst Resources = () => {\n  const classes = useStyles();\n  const [showAddResource, setShowAddResource] = useState(false);\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box>\n        <Box mb={{xs: 4, sm: 4, xl: 6}}>\n          <Grid\n            container\n            direction='row'\n            justify='space-between'\n            alignItems='center'>\n            <Grid item xs={6}>\n              <Box\n                component='h2'\n                color='text.primary'\n                fontSize={16}\n                fontWeight={Fonts.BOLD}>\n                <IntlMessages id='resources.heading' />\n              </Box>\n            </Grid>\n            <Grid item xs={6} className={classes.buttonContainer}>\n              <Button\n                variant='contained'\n                color='primary'\n                startIcon={<AddIcon />}\n                onClick={() => setShowAddResource(true)}>\n                Add Resource\n              </Button>\n            </Grid>\n          </Grid>\n        </Box>\n        <Box className={classes.materialTable}>\n          <MaterialTable\n            title=''\n            columns={[\n              {title: 'Name', field: 'name'},\n              {title: 'Surname', field: 'surname'},\n              {title: 'Skill', field: 'skill', type: 'numeric'},\n              {\n                title: 'Working Status',\n                field: 'workingStatus',\n                lookup: {0: 'Not working', 1: 'Working'},\n              },\n            ]}\n            data={[\n              {\n                name: 'Mehmet',\n                surname: 'Baran',\n                skill: 'Nurse',\n                workingStatus: 1,\n              },\n              {\n                name: 'Zerya Betül',\n                surname: 'Dan',\n                skill: 'Chef',\n                workingStatus: 0,\n              },\n            ]}\n            actions={[\n              {\n                icon: 'save',\n                tooltip: 'Save User',\n                onClick: (event, rowData) => alert('You saved '),\n              },\n            ]}\n          />\n        </Box>\n        <AddResourceModal\n          open={showAddResource}\n          handleClose={() => setShowAddResource(false)}\n        />\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default Resources;\n","/Users/deepu/work/rosterd/src/frontend/src/modules/reports/index.tsx",["193"],"import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport AppAnimate from '@crema/core/AppAnimate';\n\nconst Reports = () => (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box>\n        <Box component='h4' mb={3} fontSize={20}>\n          Reports\n        </Box>\n        <Box component='p' fontSize={16}>\n          You can start from here..\n        </Box>\n      </Box>\n    </AppAnimate>\n  );\n\nexport default Reports;\n","/Users/deepu/work/rosterd/src/frontend/src/modules/jobs/index.tsx",["194","195"],"import React, {useState} from 'react';\nimport Box from '@material-ui/core/Box';\nimport AppAnimate from '@crema/core/AppAnimate';\nimport {\n  AppBar,\n  Tabs,\n  Tab,\n  makeStyles,\n  Typography,\n  Button,\n  Grid,\n} from '@material-ui/core';\nimport MaterialTable from 'material-table';\nimport IntlMessages from '@crema/utility/IntlMessages';\nimport {Fonts} from 'shared/constants/AppEnums';\nimport AddIcon from '@material-ui/icons/Add';\nimport PublishJobModal from './components/PublishJobModal';\n\ninterface TabPanelProps {\n  // eslint-disable-next-line react/require-default-props\n  children?: React.ReactNode;\n  index: number;\n  value: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  buttonContainer: {\n    textAlign: 'right',\n  },\n}));\n\nfunction TabPanel(props: TabPanelProps) {\n  const {children, value, index, ...other} = props;\n\n  return (\n    <div\n      role='tabpanel'\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...other}>\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst Jobs = (): JSX.Element => {\n  const classes = useStyles();\n  const [tabIndex, setTabIndex] = useState(0);\n  const [showJobModal, setShowJobModal] = useState(false);\n\n  const handleTabChange = (_: any, newValue: number) => {\n    setTabIndex(newValue);\n  };\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box>\n        <Box mb={{xs: 4, sm: 4, xl: 6}}>\n          <Grid\n            container\n            direction='row'\n            justify='space-between'\n            alignItems='center'>\n            <Grid item xs={6}>\n              <Box\n                component='h2'\n                color='text.primary'\n                fontSize={16}\n                fontWeight={Fonts.BOLD}>\n                <IntlMessages id='jobs.heading' />\n              </Box>\n            </Grid>\n            <Grid item xs={6} className={classes.buttonContainer}>\n              <Button\n                variant='contained'\n                color='primary'\n                startIcon={<AddIcon />}\n                onClick={() => setShowJobModal(true)}>\n                Publish Job\n              </Button>\n            </Grid>\n          </Grid>\n        </Box>\n        <Box>\n          <div className={classes.root}>\n            <AppBar position='static'>\n              <Tabs\n                value={tabIndex}\n                onChange={handleTabChange}\n                aria-label='simple tabs example'>\n                <Tab label='Active' />\n                <Tab label='Fulfilled' />\n              </Tabs>\n            </AppBar>\n            <TabPanel value={tabIndex} index={0}>\n              <MaterialTable\n                title=''\n                columns={[\n                  {title: 'Title', field: 'title'},\n                  {title: 'From', field: 'from', type: 'date'},\n                  {title: 'To', field: 'to', type: 'date'},\n                  {title: 'Status', field: 'status'},\n                  {title: 'Facility', field: 'facility'},\n                ]}\n                data={[\n                  {\n                    title: 'Staff Nurse',\n                    from: '12/04/2021 11:00AM',\n                    to: '13/04/2021 11:00AM',\n                    status: 'Accepted',\n                    facility: 'Mt Roskill',\n                  },\n                  {\n                    title: 'Staff Nurse',\n                    from: '11/04/2021 10:00PM',\n                    to: '12/04/2021 06:00AM',\n                    status: 'Pending',\n                    facility: 'Mt Roskill',\n                  },\n                ]}\n              />\n            </TabPanel>\n            <TabPanel value={tabIndex} index={1}>\n              <MaterialTable\n                title=''\n                columns={[\n                  {title: 'Title', field: 'title'},\n                  {title: 'From', field: 'from', type: 'date'},\n                  {title: 'To', field: 'to', type: 'date'},\n                  {title: 'Status', field: 'status'},\n                  {title: 'Facility', field: 'facility'},\n                ]}\n                data={[\n                  {\n                    title: 'Healthcare Assistant Level 2',\n                    from: '12/03/2021 11:00AM',\n                    to: '13/03/2021 05:00PM',\n                    status: 'Completed',\n                    facility: 'Mt Roskill',\n                  },\n                  {\n                    title: 'Chef',\n                    from: '02/02/2021 11:00AM',\n                    to: '03/02/2021 12:00AM',\n                    status: 'Completed',\n                    facility: 'Mt Roskill',\n                  },\n                ]}\n              />\n            </TabPanel>\n          </div>\n        </Box>\n        <PublishJobModal\n          open={showJobModal}\n          handleClose={() => setShowJobModal(false)}\n        />\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default Jobs;\n","/Users/deepu/work/rosterd/src/frontend/src/modules/dashboard/index.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/index.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/modules/facilities/components/AddFacilityModal.tsx",["196","197"],"/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Formik, Form, Field} from 'formik';\nimport {Button, LinearProgress} from '@material-ui/core';\nimport {TextField} from 'formik-material-ui';\n\ninterface AddFacilityModalProps {\n  open: boolean;\n  handleClose: () => void;\n}\n\ninterface FormValues {\n  name: string;\n  suburb: string;\n  city: string;\n}\n\nconst AddFacilityModal: React.FC<AddFacilityModalProps> = (\n  props,\n): JSX.Element => (\n  <Formik\n    initialValues={{\n      name: '',\n      suburb: '',\n      city: '',\n    }}\n    validate={(values: FormValues) => {\n      const errors: Partial<FormValues> = {};\n      console.log(values);\n      return errors;\n    }}\n    onSubmit={(values, {setSubmitting}) => {\n      setTimeout(() => {\n        setSubmitting(false);\n        alert(JSON.stringify(values, null, 2));\n      }, 500);\n    }}>\n    {({submitForm, isSubmitting}) => (\n      <Dialog\n        fullWidth\n        maxWidth='sm'\n        open={props.open}\n        onClose={props.handleClose}\n        aria-labelledby='form-dialog-title'>\n        <DialogTitle id='form-dialog-title'>Add Resource</DialogTitle>\n        <DialogContent>\n          <Form>\n            <Field component={TextField} name='name' label='Name' fullWidth />\n            <br />\n            <Field\n              component={TextField}\n              name='suburb'\n              label='Suburb'\n              fullWidth\n            />\n            <br />\n            <Field component={TextField} name='city' label='City' fullWidth />\n\n            {isSubmitting && <LinearProgress />}\n          </Form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.handleClose} color='primary'>\n            Cancel\n          </Button>\n          <Button\n            onClick={submitForm}\n            color='primary'\n            disabled={isSubmitting}\n            variant='contained'>\n            Add Facility\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )}\n  </Formik>\n);\n\nexport default AddFacilityModal;\n","/Users/deepu/work/rosterd/src/frontend/src/modules/resources/components/AddResourceModal.tsx",["198","199"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Formik, Form, Field} from 'formik';\nimport {Button, LinearProgress} from '@material-ui/core';\nimport {TextField} from 'formik-material-ui';\n\ninterface AddResourceModalProps {\n  open: boolean;\n  handleClose: () => void;\n}\n\ninterface FormValues {\n  email: string;\n  name: string;\n  mobile: number;\n  skill: string;\n  address: string;\n}\n\nexport default function AddResourceModal(props: AddResourceModalProps) {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        mobile: '',\n        skill: '',\n        address: '',\n      }}\n      validate={(values) => {\n        const errors: Partial<FormValues> = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(values, {setSubmitting}) => {\n        setTimeout(() => {\n          setSubmitting(false);\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}>\n      {({submitForm, isSubmitting}) => (\n        <Dialog\n          fullWidth\n          maxWidth='sm'\n          open={props.open}\n          onClose={props.handleClose}\n          aria-labelledby='form-dialog-title'>\n          <DialogTitle id='form-dialog-title'>Add Resource</DialogTitle>\n          <DialogContent>\n            <Form>\n              <Field component={TextField} name='name' label='Name' fullWidth />\n              <br />\n              <Field\n                component={TextField}\n                name='email'\n                type='email'\n                label='Email'\n                fullWidth\n              />\n              <br />\n              <Field\n                component={TextField}\n                name='mobile'\n                type='tel'\n                label='Mobile Number'\n                fullWidth\n              />\n              <br />\n              <Field\n                component={TextField}\n                name='skill'\n                label='Skill'\n                fullWidth\n              />\n              <br />\n              <Field\n                component={TextField}\n                name='address'\n                label='Address'\n                fullWidth\n              />\n              <br />\n              {isSubmitting && <LinearProgress />}\n            </Form>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={props.handleClose} color='primary'>\n              Cancel\n            </Button>\n            <Button\n              onClick={submitForm}\n              color='primary'\n              disabled={isSubmitting}\n              variant='contained'>\n              Add\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n    </Formik>\n  );\n}\n","/Users/deepu/work/rosterd/src/frontend/src/modules/jobs/components/PublishJobModal.tsx",["200"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Formik, Form, Field} from 'formik';\nimport {Button, LinearProgress} from '@material-ui/core';\nimport {TextField} from 'formik-material-ui';\nimport {DateTimePicker} from 'formik-material-ui-pickers';\nimport {MuiPickersUtilsProvider} from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\ninterface PublishJobModalProps {\n  open: boolean;\n  handleClose: () => void;\n}\n\ninterface FormValues {\n  title: string;\n  skill: string;\n  description: string;\n  facility: string;\n  from: string;\n  to: string;\n  comments: string;\n}\n\nconst PublishJobModal = (props: PublishJobModalProps): JSX.Element => (\n  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    <Formik\n      initialValues={{\n        title: '',\n        skill: '',\n        description: '',\n        facility: '',\n        from: '',\n        to: '',\n        comments: '',\n      }}\n      validate={(values) => {\n        const errors: Partial<FormValues> = {};\n        if (!values.skill) {\n          errors.skill = 'Required';\n        }\n        return errors;\n      }}\n      onSubmit={(values, {setSubmitting}) => {\n        setTimeout(() => {\n          setSubmitting(false);\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}>\n      {({submitForm, isSubmitting}) => (\n        <Dialog\n          fullWidth\n          maxWidth='sm'\n          open={props.open}\n          onClose={props.handleClose}\n          aria-labelledby='form-dialog-title'>\n          <DialogTitle id='form-dialog-title'>Publish Job</DialogTitle>\n          <DialogContent>\n            <Form>\n              <Field\n                component={TextField}\n                name='title'\n                label='Title'\n                fullWidth\n              />\n              <br />\n              <Field\n                component={TextField}\n                name='skill'\n                label='Skill Required'\n                fullWidth\n              />\n              <br />\n              <Field\n                component={TextField}\n                name='description'\n                label='Description'\n                fullWidth\n              />\n              <br />\n              <Field\n                component={TextField}\n                name='facility'\n                label='Facility'\n                fullWidth\n              />\n              <br />\n              <Field\n                component={DateTimePicker}\n                name='from'\n                label='From'\n                fullWidth\n              />\n              <br />\n              <Field\n                component={DateTimePicker}\n                name='to'\n                label='To'\n                fullWidth\n              />\n\n              <Field\n                component={TextField}\n                name='comments'\n                label='Comments'\n                fullWidth\n              />\n              <br />\n              {isSubmitting && <LinearProgress />}\n            </Form>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={props.handleClose} color='primary'>\n              Cancel\n            </Button>\n            <Button\n              onClick={submitForm}\n              color='primary'\n              disabled={isSubmitting}\n              variant='contained'>\n              Publish\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n    </Formik>\n  </MuiPickersUtilsProvider>\n);\n\nexport default PublishJobModal;\n","/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/Error404/index.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/modules/dashboard/components/StatsCard.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/services/facilities.api.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/ComingSoon/index.tsx",["201","202"],"/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport {Form, Formik, useField} from 'formik';\nimport * as yup from 'yup';\nimport InfoView from '@crema/core/InfoView';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport {grey} from '@material-ui/core/colors';\nimport {makeStyles} from '@material-ui/core';\nimport {useIntl} from 'react-intl';\nimport {Fonts} from '../../../shared/constants/AppEnums';\nimport AppAnimate from '../../../@crema/core/AppAnimate';\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\nimport {\n  showMessage,\n  useInfoViewActionsContext,\n} from '../../../@crema/core/InfoView/InfoViewContext';\n\nconst useStyles = makeStyles(() => ({\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  textField: {\n    width: '100%',\n    marginBottom: 20,\n  },\n  button: {\n    fontWeight: Fonts.BOLD,\n    fontSize: 16,\n    textTransform: 'capitalize',\n  },\n}));\nconst MyTextField = (props: any) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return (\n    <TextField\n      {...props}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email('The Email you entered is not a valid format!')\n    .required('Please enter Email Address!'),\n});\n\nconst ComingSoon = (): JSX.Element => {\n  const dispatch = useInfoViewActionsContext()!;\n\n  const classes = useStyles();\n  const {messages} = useIntl();\n\n  return (\n    <AppAnimate animation='transition.slideUpIn' delay={200}>\n      <Box\n        py={{xl: 8}}\n        flex={1}\n        display='flex'\n        flexDirection='column'\n        justifyContent='center'\n        alignItems='center'\n        textAlign='center'>\n        <Box>\n          <Box\n            component='h3'\n            mb={{xs: 4, xl: 10}}\n            fontSize={{xs: 20, md: 24}}\n            fontWeight={Fonts.BOLD}>\n            <IntlMessages id='error.comingSoon' />!\n          </Box>\n          <Box\n            mb={{xs: 5, xl: 12}}\n            color={grey[600]}\n            fontWeight={Fonts.MEDIUM}\n            fontSize={16}>\n            <Typography>\n              <IntlMessages id='error.comingSoonMessage1' />\n            </Typography>\n            <Typography>\n              <IntlMessages id='error.comingSoonMessage2' />\n            </Typography>\n          </Box>\n          <Box mx='auto' mb={5} maxWidth={384}>\n            <Formik\n              validateOnChange\n              initialValues={{\n                email: '',\n              }}\n              validationSchema={validationSchema}\n              onSubmit={(data, {resetForm}) => {\n                dispatch(\n                  showMessage(\n                    messages['error.comingSoonNotification'] as string,\n                  ),\n                );\n                resetForm();\n              }}>\n              {() => (\n                <Form className={classes.form}>\n                  <MyTextField\n                    placeholder='Email'\n                    name='email'\n                    label={<IntlMessages id='common.emailAddress' />}\n                    className={classes.textField}\n                    variant='outlined'\n                  />\n\n                  <Button\n                    variant='contained'\n                    color='primary'\n                    type='submit'\n                    className={classes.button}>\n                    <IntlMessages id='error.notifyMe' />\n                  </Button>\n                </Form>\n              )}\n            </Formik>\n          </Box>\n          <Box mb={5} maxWidth={{xs: 300, sm: 400, xl: 672}} width='100%'>\n            <img\n              src='/assets/images/errorPageImages/comingsoon.png'\n              alt='404'\n            />\n          </Box>\n        </Box>\n        <InfoView />\n      </Box>\n    </AppAnimate>\n  );\n};\n\nexport default ComingSoon;\n","/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/Error500/index.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/modules/errorPages/Maintenance/index.tsx",[],"/Users/deepu/work/rosterd/src/frontend/src/shared/services/axiosInstance.ts",[],"/Users/deepu/work/rosterd/src/frontend/src/types/actions/Auth.actions.ts",[],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"214","line":3,"column":25,"nodeType":"215","messageId":"216","endLine":3,"endColumn":57},{"ruleId":"217","severity":1,"message":"218","line":8,"column":18,"nodeType":"219","messageId":"220","endLine":8,"endColumn":21,"suggestions":"221"},{"ruleId":"217","severity":1,"message":"218","line":11,"column":34,"nodeType":"219","messageId":"220","endLine":11,"endColumn":37,"suggestions":"222"},{"ruleId":"217","severity":1,"message":"218","line":72,"column":31,"nodeType":"219","messageId":"220","endLine":72,"endColumn":34,"suggestions":"223"},{"ruleId":"213","severity":1,"message":"214","line":9,"column":17,"nodeType":"215","messageId":"216","endLine":9,"endColumn":22},{"ruleId":"217","severity":1,"message":"218","line":77,"column":31,"nodeType":"219","messageId":"220","endLine":77,"endColumn":34,"suggestions":"224"},{"ruleId":"213","severity":1,"message":"214","line":6,"column":22,"nodeType":"215","messageId":"216","endLine":6,"endColumn":27},{"ruleId":"213","severity":1,"message":"214","line":23,"column":19,"nodeType":"215","messageId":"216","endLine":23,"endColumn":24},{"ruleId":"225","severity":1,"message":"226","line":35,"column":3,"nodeType":"227","messageId":"228","endLine":35,"endColumn":14},{"ruleId":"229","severity":1,"message":"230","line":54,"column":39,"nodeType":"231","messageId":"232","endLine":54,"endColumn":45},{"ruleId":"229","severity":1,"message":"230","line":61,"column":39,"nodeType":"231","messageId":"232","endLine":61,"endColumn":45},{"ruleId":"217","severity":1,"message":"218","line":64,"column":47,"nodeType":"219","messageId":"220","endLine":64,"endColumn":50,"suggestions":"233"},{"ruleId":"229","severity":1,"message":"230","line":71,"column":39,"nodeType":"231","messageId":"232","endLine":71,"endColumn":45},{"ruleId":"217","severity":1,"message":"218","line":74,"column":47,"nodeType":"219","messageId":"220","endLine":74,"endColumn":50,"suggestions":"234"},{"ruleId":"213","severity":1,"message":"214","line":22,"column":19,"nodeType":"215","messageId":"216","endLine":22,"endColumn":24},{"ruleId":"229","severity":1,"message":"235","line":85,"column":27,"nodeType":"231","messageId":"232","endLine":85,"endColumn":32},{"ruleId":"229","severity":1,"message":"236","line":85,"column":34,"nodeType":"231","messageId":"232","endLine":85,"endColumn":41},{"ruleId":"237","severity":1,"message":"238","line":85,"column":46,"nodeType":"239","messageId":"228","endLine":85,"endColumn":65},{"ruleId":"213","severity":1,"message":"214","line":5,"column":17,"nodeType":"215","messageId":"216","endLine":5,"endColumn":22},{"ruleId":"217","severity":1,"message":"218","line":23,"column":10,"nodeType":"219","messageId":"220","endLine":23,"endColumn":13,"suggestions":"240"},{"ruleId":"217","severity":1,"message":"218","line":61,"column":31,"nodeType":"219","messageId":"220","endLine":61,"endColumn":34,"suggestions":"241"},{"ruleId":"225","severity":1,"message":"226","line":33,"column":7,"nodeType":"227","messageId":"228","endLine":33,"endColumn":18},{"ruleId":"237","severity":1,"message":"238","line":39,"column":9,"nodeType":"239","messageId":"228","endLine":39,"endColumn":47},{"ruleId":"213","severity":1,"message":"214","line":23,"column":16,"nodeType":"242","messageId":"216","endLine":23,"endColumn":71},{"ruleId":"237","severity":1,"message":"238","line":47,"column":11,"nodeType":"239","messageId":"228","endLine":47,"endColumn":49},{"ruleId":"237","severity":1,"message":"238","line":50,"column":11,"nodeType":"239","messageId":"228","endLine":50,"endColumn":49},{"ruleId":"217","severity":1,"message":"218","line":38,"column":29,"nodeType":"219","messageId":"220","endLine":38,"endColumn":32,"suggestions":"243"},{"ruleId":"244","severity":1,"message":"245","line":60,"column":20,"nodeType":"246","messageId":"247","endLine":60,"endColumn":48},"lines-around-directive",["248"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["249","250"],["251","252"],["253","254"],["255","256"],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-unused-vars","'reject' is defined but never used.","Identifier","unusedVar",["257","258"],["259","260"],"'event' is defined but never used.","'rowData' is defined but never used.","no-alert","Unexpected alert.","CallExpression",["261","262"],["263","264"],"FunctionDeclaration",["265","266"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","padding-line-between-statements",{"messageId":"267","fix":"268","desc":"269"},{"messageId":"270","fix":"271","desc":"272"},{"messageId":"267","fix":"273","desc":"269"},{"messageId":"270","fix":"274","desc":"272"},{"messageId":"267","fix":"275","desc":"269"},{"messageId":"270","fix":"276","desc":"272"},{"messageId":"267","fix":"277","desc":"269"},{"messageId":"270","fix":"278","desc":"272"},{"messageId":"267","fix":"279","desc":"269"},{"messageId":"270","fix":"280","desc":"272"},{"messageId":"267","fix":"281","desc":"269"},{"messageId":"270","fix":"282","desc":"272"},{"messageId":"267","fix":"283","desc":"269"},{"messageId":"270","fix":"284","desc":"272"},{"messageId":"267","fix":"285","desc":"269"},{"messageId":"270","fix":"286","desc":"272"},{"messageId":"267","fix":"287","desc":"269"},{"messageId":"270","fix":"288","desc":"272"},"suggestUnknown",{"range":"289","text":"290"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"289","text":"291"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"292","text":"290"},{"range":"292","text":"291"},{"range":"293","text":"290"},{"range":"293","text":"291"},{"range":"294","text":"290"},{"range":"294","text":"291"},{"range":"295","text":"290"},{"range":"295","text":"291"},{"range":"296","text":"290"},{"range":"296","text":"291"},{"range":"297","text":"290"},{"range":"297","text":"291"},{"range":"298","text":"290"},{"range":"298","text":"291"},{"range":"299","text":"290"},{"range":"299","text":"291"},[251,254],"unknown","never",[369,372],[2080,2083],[2441,2444],[1872,1875],[2297,2300],[633,636],[1497,1500],[1154,1157]]