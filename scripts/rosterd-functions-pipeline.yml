trigger:
  branches:
    include:
      - main
  paths:
    include:
      - scripts/rosterd-functions-pipeline.yml
      # - src/backend/*
    exclude:
      - src/backend/Rosterd.Client.Api
      - src/backend/Rosterd.Admin.Api

pool:
  vmImage: 'windows-latest'

########### BUILD ###############################################################################################################################

stages:
- stage: Build
  jobs:
  - job: build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore Packages
      inputs:
        command: restore
        projects: '**/*.csproj'

    - script: |
        dotnet build --configuration Release
      workingDirectory: 'src/backend/Rosterd.AzureFunctions'
      displayName: "Build"

    - task: DotNetCoreCLI@2
      displayName: "Publish"
      inputs:
        command: publish
        arguments: '--configuration Release --output publish_output'
        projects: 'src/backend/Rosterd.AzureFunctions'
        publishWebProjects: false
        modifyOutputPath: false
        zipAfterPublish: false

    - task: ArchiveFiles@2
      displayName: "Archive files"
      inputs:
        rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output"
        includeRootFolder: false
        archiveFile: "$(System.DefaultWorkingDirectory)/build.zip"

    - task: PublishBuildArtifacts@1
      displayName: "Publish Artifacts"
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/build.zip'
        artifactName: 'drop'

- stage: DeployToDev
  variables:
    - group: rosterd-azure-functions
  displayName: Deploy To Dev
  jobs:
  - deployment: deploy
    pool:
      vmImage: 'windows-latest'
    environment: 'functions-dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: drop
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: 'rosterd-service-connection'
              appType: 'functionApp'
              appName: 'func-event-processor-dev'
              package: '$(System.ArtifactsDirectory)/**/*.zip'
              configurationStrings: '-configs "settings"'
              deploymentMethod: 'auto'
              appSettings: 
                          '
                            -FunctionSettings:Environment "Dev"
                            -FunctionSettings:RosterdDbConnectionString "$(FunctionSettings:RosterdDbConnectionString)"
                            -FunctionSettings:StorageAccount "$(FunctionSettings:StorageAccount)"
                            -FunctionSettings:SearchServiceEndpoint "$(FunctionSettings:SearchServiceEndpoint)"
                            -FunctionSettings:SearchServiceApiKey "$(FunctionSettings:SearchServiceApiKey)"
                            -FunctionSettings:TableStorageConnectionString "$(FunctionSettings:TableStorageConnectionString)"
                            -FunctionSettings:MovedJobsPastTimeLimitToExpiredStateSchedule "0 */30 * * * *"
                            -FunctionSettings:MoveJobsPastEndDateToFeedbackStateSchedule "0 0 */6 * * *"
                            -FunctionSettings:MoveFinishedJobsFromSearchSchedule "0 0 0 * * *"
                            -APPINSIGHTS_INSTRUMENTATIONKEY "$(ApplicationInsights.InstrumentationKey)"
                          '
